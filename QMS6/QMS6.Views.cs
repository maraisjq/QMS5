//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(QMS6.Model1Container),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsf6b9247223618f27307d871094f625768d7a605a61661e304a763fb5b1c1ded8))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// //**********************************************************************************************************************************************************************
    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    /// //**********************************************************************************************************************************************************************
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySetsf6b9247223618f27307d871094f625768d7a605a61661e304a763fb5b1c1ded8 : DbMappingViewCache
    {
        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        /// //**********************************************************************************************************************************************************************
        public override string MappingHashValue
        {
            get { return "f6b9247223618f27307d871094f625768d7a605a61661e304a763fb5b1c1ded8"; }
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "Model1StoreContainer.Audits")
            {
                return GetView0();
            }

            if (extentName == "Model1StoreContainer.AuditStatus")
            {
                return GetView1();
            }

            if (extentName == "Model1StoreContainer.AuditTypes")
            {
                return GetView2();
            }

            if (extentName == "Model1StoreContainer.AuditPresentations")
            {
                return GetView3();
            }

            if (extentName == "Model1StoreContainer.Staffs")
            {
                return GetView4();
            }

            if (extentName == "Model1StoreContainer.AuditActionPlans")
            {
                return GetView5();
            }

            if (extentName == "Model1StoreContainer.AuditMethods")
            {
                return GetView6();
            }

            if (extentName == "Model1StoreContainer.AuditOutcomes")
            {
                return GetView7();
            }

            if (extentName == "Model1StoreContainer.AuditFrequencies")
            {
                return GetView8();
            }

            if (extentName == "Model1StoreContainer.AuditStandards")
            {
                return GetView9();
            }

            if (extentName == "Model1StoreContainer.IRMERAudits")
            {
                return GetView10();
            }

            if (extentName == "Model1StoreContainer.RegularAudits")
            {
                return GetView11();
            }

            if (extentName == "Model1StoreContainer.AuditSOPs")
            {
                return GetView12();
            }

            if (extentName == "Model1StoreContainer.RegularAuditsAudits")
            {
                return GetView13();
            }

            if (extentName == "Model1StoreContainer.IRMERAuditsAudits1")
            {
                return GetView14();
            }

            if (extentName == "Model1Container.Audits")
            {
                return GetView15();
            }

            if (extentName == "Model1Container.AuditsAuditTypes")
            {
                return GetView16();
            }

            if (extentName == "Model1Container.AuditStatus")
            {
                return GetView17();
            }

            if (extentName == "Model1Container.AuditStatusAudits")
            {
                return GetView18();
            }

            if (extentName == "Model1Container.AuditTypes")
            {
                return GetView19();
            }

            if (extentName == "Model1Container.AuditPresentations")
            {
                return GetView20();
            }

            if (extentName == "Model1Container.AuditPresentationsAudits")
            {
                return GetView21();
            }

            if (extentName == "Model1Container.AuditPresentationsStaff")
            {
                return GetView22();
            }

            if (extentName == "Model1Container.Staffs")
            {
                return GetView23();
            }

            if (extentName == "Model1Container.StaffAudits")
            {
                return GetView24();
            }

            if (extentName == "Model1Container.StaffAudits1")
            {
                return GetView25();
            }

            if (extentName == "Model1Container.AuditActionPlans")
            {
                return GetView26();
            }

            if (extentName == "Model1Container.AuditActionPlansAudits")
            {
                return GetView27();
            }

            if (extentName == "Model1Container.AuditMethods")
            {
                return GetView28();
            }

            if (extentName == "Model1Container.AuditMethodsAudits")
            {
                return GetView29();
            }

            if (extentName == "Model1Container.AuditOutcomes")
            {
                return GetView30();
            }

            if (extentName == "Model1Container.AuditOutcomesAudits")
            {
                return GetView31();
            }

            if (extentName == "Model1Container.AuditFrequencies")
            {
                return GetView32();
            }

            if (extentName == "Model1Container.AuditStandards")
            {
                return GetView33();
            }

            if (extentName == "Model1Container.AuditStandardsAudits")
            {
                return GetView34();
            }

            if (extentName == "Model1Container.IRMERAudits")
            {
                return GetView35();
            }

            if (extentName == "Model1Container.IRMERAuditsAuditFrequencies")
            {
                return GetView36();
            }

            if (extentName == "Model1Container.RegularAudits")
            {
                return GetView37();
            }

            if (extentName == "Model1Container.AuditSOPs")
            {
                return GetView38();
            }

            if (extentName == "Model1Container.AuditSOPsAudits")
            {
                return GetView39();
            }

            if (extentName == "Model1Container.RegularAuditsAudits")
            {
                return GetView40();
            }

            if (extentName == "Model1Container.IRMERAuditsAudits1")
            {
                return GetView41();
            }

            return null;
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.Audits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing Audits
                    [Model1.Store.Audits](T3.Audits_Id, T3.Audits_TypeID, T3.Audits_StatusID, T3.Audits_MethodID, T3.Audits_ActionPlanID, T3.Audits_OutcomeID, T3.Audits_PresentationID, T3.Audits_StandardsID, T3.Audits_AuthorID, T3.Audits_ManagerID, T3.Audits_Reference, T3.Audits_OwnerID, T3.Audits_RoleID, T3.Audits_AuditID, T3.Audits_IRMERAuditID, T3.[Audits.AuditTypes_Id])
                FROM (
                    SELECT T1.Audits_Id, T2.Audits_TypeID, T2.Audits_StatusID, T2.Audits_MethodID, T2.Audits_ActionPlanID, T2.Audits_OutcomeID, T2.Audits_PresentationID, T2.Audits_StandardsID, T2.Audits_AuthorID, T2.Audits_ManagerID, T2.Audits_Reference, T2.Audits_OwnerID, T2.Audits_RoleID, T2.Audits_AuditID, T2.Audits_IRMERAuditID, T1.[Audits.AuditTypes_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            Key(T.Audits).Id AS Audits_Id, 
                            Key(T.AuditTypes).Id AS [Audits.AuditTypes_Id], 
                            True AS _from1
                        FROM Model1Container.AuditsAuditTypes AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            T.Id AS Audits_Id, 
                            T.TypeID AS Audits_TypeID, 
                            T.StatusID AS Audits_StatusID, 
                            T.MethodID AS Audits_MethodID, 
                            T.ActionPlanID AS Audits_ActionPlanID, 
                            T.OutcomeID AS Audits_OutcomeID, 
                            T.PresentationID AS Audits_PresentationID, 
                            T.StandardsID AS Audits_StandardsID, 
                            T.AuthorID AS Audits_AuthorID, 
                            T.ManagerID AS Audits_ManagerID, 
                            T.Reference AS Audits_Reference, 
                            T.OwnerID AS Audits_OwnerID, 
                            T.RoleID AS Audits_RoleID, 
                            T.AuditID AS Audits_AuditID, 
                            T.IRMERAuditID AS Audits_IRMERAuditID, 
                            True AS _from0
                        FROM Model1Container.Audits AS T) AS T2
                        ON T1.Audits_Id = T2.Audits_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStatus
                    [Model1.Store.AuditStatus](T3.AuditStatus_Id, T3.AuditStatus_Status, T3.[AuditStatus.Audits_Id])
                FROM (
                    SELECT T1.AuditStatus_Id, T2.AuditStatus_Status, T1.[AuditStatus.Audits_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            Key(T.AuditStatus).Id AS AuditStatus_Id, 
                            Key(T.Audits).Id AS [AuditStatus.Audits_Id], 
                            True AS _from1
                        FROM Model1Container.AuditStatusAudits AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            T.Id AS AuditStatus_Id, 
                            T.Status AS AuditStatus_Status, 
                            True AS _from0
                        FROM Model1Container.AuditStatus AS T) AS T2
                        ON T1.AuditStatus_Id = T2.AuditStatus_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditTypes
                    [Model1.Store.AuditTypes](T1.AuditTypes_Id, T1.AuditTypes_Type)
                FROM (
                    SELECT 
                        T.Id AS AuditTypes_Id,   
                        T.Type AS AuditTypes_Type, 
                        True AS _from0
                    FROM Model1Container.AuditTypes AS T
                ) AS T1"
            );
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditPresentations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditPresentations
                    [Model1.Store.AuditPresentations](T4.AuditPresentations_Id, T4.AuditPresentations_PresentationDate, T4.AuditPresentations_PresenterID, T4.AuditPresentations_Presentation, T4.[AuditPresentations.Audits_Id], T4.[AuditPresentations.Staffs_Id])
                FROM (
                    SELECT T1.AuditPresentations_Id, T3.AuditPresentations_PresentationDate, T3.AuditPresentations_PresenterID, T3.AuditPresentations_Presentation, T2.[AuditPresentations.Audits_Id], T1.[AuditPresentations.Staffs_Id], T3._from0, T2._from1, T1._from2
                    FROM  (
                        SELECT 
                            Key(T.AuditPresentations).Id AS AuditPresentations_Id, 
                            Key(T.Staff).Id AS [AuditPresentations.Staffs_Id], 
                            True AS _from2
                        FROM Model1Container.AuditPresentationsStaff AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            Key(T.AuditPresentations).Id AS AuditPresentations_Id, 
                            Key(T.Audits).Id AS [AuditPresentations.Audits_Id], 
                            True AS _from1
                        FROM Model1Container.AuditPresentationsAudits AS T) AS T2
                        ON T1.AuditPresentations_Id = T2.AuditPresentations_Id
                        INNER JOIN (
                        SELECT 
                            T.Id AS AuditPresentations_Id, 
                            T.PresentationDate AS AuditPresentations_PresentationDate, 
                            T.PresenterID AS AuditPresentations_PresenterID, 
                            T.Presentation AS AuditPresentations_Presentation, 
                            True AS _from0
                        FROM Model1Container.AuditPresentations AS T) AS T3
                        ON T1.AuditPresentations_Id = T3.AuditPresentations_Id
                ) AS T4");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.Staffs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing Staffs
                    [Model1.Store.Staffs](T4.Staffs_Id, T4.Staffs_FIrstName, T4.Staffs_LastName, T4.Staffs_EMail, T4.[Staffs.Author_Id], T4.[Staffs.Manager_Id])
                FROM (
                    SELECT T1.Staffs_Id, T3.Staffs_FIrstName, T3.Staffs_LastName, T3.Staffs_EMail, T2.[Staffs.Author_Id], T1.[Staffs.Manager_Id], T3._from0, T2._from1, T1._from2
                    FROM  (
                        SELECT 
                            Key(T.Staff).Id AS Staffs_Id, 
                            Key(T.Audits).Id AS [Staffs.Manager_Id], 
                            True AS _from2
                        FROM Model1Container.StaffAudits1 AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            Key(T.Staff).Id AS Staffs_Id, 
                            Key(T.Audits).Id AS [Staffs.Author_Id], 
                            True AS _from1
                        FROM Model1Container.StaffAudits AS T) AS T2
                        ON T1.Staffs_Id = T2.Staffs_Id
                        INNER JOIN (
                        SELECT 
                            T.Id AS Staffs_Id, 
                            T.FIrstName AS Staffs_FIrstName, 
                            T.LastName AS Staffs_LastName, 
                            T.EMail AS Staffs_EMail, 
                            True AS _from0
                        FROM Model1Container.Staffs AS T) AS T3
                        ON T1.Staffs_Id = T3.Staffs_Id
                ) AS T4");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditActionPlans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditActionPlans
                    [Model1.Store.AuditActionPlans](T3.AuditActionPlans_Id, T3.AuditActionPlans_ActionPlan, T3.[AuditActionPlans.Audits_Id])
                FROM (
                    SELECT T1.AuditActionPlans_Id, T1.AuditActionPlans_ActionPlan, T2.[AuditActionPlans.Audits_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            T.Id AS AuditActionPlans_Id, 
                            T.ActionPlan AS AuditActionPlans_ActionPlan, 
                            True AS _from1
                        FROM Model1Container.AuditActionPlans AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            Key(T.AuditActionPlans).Id AS AuditActionPlans_Id, 
                            Key(T.Audits).Id AS [AuditActionPlans.Audits_Id], 
                            True AS _from0
                        FROM Model1Container.AuditActionPlansAudits AS T) AS T2
                        ON T1.AuditActionPlans_Id = T2.AuditActionPlans_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditMethods
                    [Model1.Store.AuditMethods](T3.AuditMethods_Id, T3.AuditMethods_Method, T3.[AuditMethods.Audits_Id])
                FROM (
                    SELECT T1.AuditMethods_Id, T1.AuditMethods_Method, T2.[AuditMethods.Audits_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            T.Id AS AuditMethods_Id, 
                            T.Method AS AuditMethods_Method, 
                            True AS _from1
                        FROM Model1Container.AuditMethods AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            Key(T.AuditMethods).Id AS AuditMethods_Id, 
                            Key(T.Audits).Id AS [AuditMethods.Audits_Id], 
                            True AS _from0
                        FROM Model1Container.AuditMethodsAudits AS T) AS T2
                        ON T1.AuditMethods_Id = T2.AuditMethods_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditOutcomes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditOutcomes
                    [Model1.Store.AuditOutcomes](T3.AuditOutcomes_Id, T3.AuditOutcomes_Outcome, T3.[AuditOutcomes.Audits_Id])
                FROM (
                    SELECT T1.AuditOutcomes_Id, T1.AuditOutcomes_Outcome, T2.[AuditOutcomes.Audits_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            T.Id AS AuditOutcomes_Id, 
                            T.Outcome AS AuditOutcomes_Outcome, 
                            True AS _from1
                        FROM Model1Container.AuditOutcomes AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            Key(T.AuditOutcomes).Id AS AuditOutcomes_Id, 
                            Key(T.Audits).Id AS [AuditOutcomes.Audits_Id], 
                            True AS _from0
                        FROM Model1Container.AuditOutcomesAudits AS T) AS T2
                        ON T1.AuditOutcomes_Id = T2.AuditOutcomes_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditFrequencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditFrequencies
                    [Model1.Store.AuditFrequencies](T1.AuditFrequencies_Id, T1.AuditFrequencies_Frequency)
                FROM (
                    SELECT 
                        T.Id AS AuditFrequencies_Id, 
                        T.Frequency AS AuditFrequencies_Frequency, 
                        True AS _from0
                    FROM Model1Container.AuditFrequencies AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditStandards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStandards
                    [Model1.Store.AuditStandards](T1.AuditStandards_Id, T1.[AuditStandards.Audits_Id])
                FROM (
                    SELECT 
                        Key(T.AuditStandards).Id AS AuditStandards_Id, 
                        Key(T.Audits).Id AS [AuditStandards.Audits_Id], 
                        True AS _from0
                    FROM Model1Container.AuditStandardsAudits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.IRMERAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing IRMERAudits
                    [Model1.Store.IRMERAudits](T3.IRMERAudits_Id, T3.IRMERAudits_Code, T3.IRMERAudits_Name, T3.IRMERAudits_Desscription, T3.IRMERAudits_FrequencyID, T3.IRMERAudits_SOPID, T3.[IRMERAudits.AuditFrequencies_Id])
                FROM (
                    SELECT T1.IRMERAudits_Id, T2.IRMERAudits_Code, T2.IRMERAudits_Name, T2.IRMERAudits_Desscription, T2.IRMERAudits_FrequencyID, T2.IRMERAudits_SOPID, T1.[IRMERAudits.AuditFrequencies_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            Key(T.IRMERAudits).Id AS IRMERAudits_Id, 
                            Key(T.AuditFrequencies).Id AS [IRMERAudits.AuditFrequencies_Id], 
                            True AS _from1
                        FROM Model1Container.IRMERAuditsAuditFrequencies AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            T.Id AS IRMERAudits_Id, 
                            T.Code AS IRMERAudits_Code, 
                            T.Name AS IRMERAudits_Name, 
                            T.Desscription AS IRMERAudits_Desscription, 
                            T.FrequencyID AS IRMERAudits_FrequencyID, 
                            T.SOPID AS IRMERAudits_SOPID, 
                            True AS _from0
                        FROM Model1Container.IRMERAudits AS T) AS T2
                        ON T1.IRMERAudits_Id = T2.IRMERAudits_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.RegularAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing RegularAudits
                    [Model1.Store.RegularAudits](T1.RegularAudits_Id, T1.RegularAudits_CreationDate, T1.RegularAudits_Name, T1.RegularAudits_Description)
                FROM (
                    SELECT 
                        T.Id AS RegularAudits_Id, 
                        T.CreationDate AS RegularAudits_CreationDate, 
                        T.Name AS RegularAudits_Name, 
                        T.Description AS RegularAudits_Description, 
                        True AS _from0
                    FROM Model1Container.RegularAudits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.AuditSOPs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditSOPs
                    [Model1.Store.AuditSOPs](T3.AuditSOPs_Id, T3.AuditSOPs_SOP, T3.[AuditSOPs.Audits_Id])
                FROM (
                    SELECT T1.AuditSOPs_Id, T2.AuditSOPs_SOP, T1.[AuditSOPs.Audits_Id], T2._from0, T1._from1
                    FROM  (
                        SELECT 
                            Key(T.AuditSOPs).Id AS AuditSOPs_Id, 
                            Key(T.Audits).Id AS [AuditSOPs.Audits_Id], 
                            True AS _from1
                        FROM Model1Container.AuditSOPsAudits AS T) AS T1
                        INNER JOIN (
                        SELECT 
                            T.Id AS AuditSOPs_Id, 
                            T.SOP AS AuditSOPs_SOP, 
                            True AS _from0
                        FROM Model1Container.AuditSOPs AS T) AS T2
                        ON T1.AuditSOPs_Id = T2.AuditSOPs_Id
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.RegularAuditsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing RegularAuditsAudits
                    [Model1.Store.RegularAuditsAudits](T1.[RegularAuditsAudits.RegularAudit_Id], T1.[RegularAuditsAudits.Audits_Id])
                FROM (
                    SELECT 
                        Key(T.RegularAudits).Id AS [RegularAuditsAudits.RegularAudit_Id], 
                        Key(T.Audits).Id AS [RegularAuditsAudits.Audits_Id], 
                        True AS _from0
                    FROM Model1Container.RegularAuditsAudits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1StoreContainer.IRMERAuditsAudits1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing IRMERAuditsAudits1
                    [Model1.Store.IRMERAuditsAudits1](T1.[IRMERAuditsAudits1.IRMERAudit1_Id], T1.[IRMERAuditsAudits1.AuditEvents_Id])
                FROM (
                    SELECT 
                        Key(T.IRMERAudits).Id AS [IRMERAuditsAudits1.IRMERAudit1_Id], 
                        Key(T.Audits).Id AS [IRMERAuditsAudits1.AuditEvents_Id], 
                        True AS _from0
                    FROM Model1Container.IRMERAuditsAudits1 AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.Audits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing Audits
                    [Model1.Audits](T1.Audits_Id, T1.Audits_TypeID, T1.Audits_StatusID, T1.Audits_MethodID, T1.Audits_ActionPlanID, T1.Audits_OutcomeID, T1.Audits_PresentationID, T1.Audits_StandardsID, T1.Audits_AuthorID, T1.Audits_ManagerID, T1.Audits_Reference, T1.Audits_OwnerID, T1.Audits_RoleID, T1.Audits_AuditID, T1.Audits_IRMERAuditID) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.AuditTypes, ROW(T1.AuditsAuditTypes_AuditTypes_Id),[Model1.AuditTypes]),[Model1.AuditsAuditTypes],Audits,AuditTypes) 
                FROM (
                    SELECT 
                        T.Id AS Audits_Id, 
                        T.TypeID AS Audits_TypeID, 
                        T.StatusID AS Audits_StatusID, 
                        T.MethodID AS Audits_MethodID, 
                        T.ActionPlanID AS Audits_ActionPlanID, 
                        T.OutcomeID AS Audits_OutcomeID, 
                        T.PresentationID AS Audits_PresentationID, 
                        T.StandardsID AS Audits_StandardsID, 
                        T.AuthorID AS Audits_AuthorID, 
                        T.ManagerID AS Audits_ManagerID, 
                        T.Reference AS Audits_Reference, 
                        T.OwnerID AS Audits_OwnerID, 
                        T.RoleID AS Audits_RoleID, 
                        T.AuditID AS Audits_AuditID, 
                        T.IRMERAuditID AS Audits_IRMERAuditID, 
                        True AS _from0, 
                        T.AuditTypes_Id AS AuditsAuditTypes_AuditTypes_Id
                    FROM Model1StoreContainer.Audits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditsAuditTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditsAuditTypes
                    [Model1.AuditsAuditTypes](T3.AuditsAuditTypes_Audits, T3.AuditsAuditTypes_AuditTypes)
                FROM (
                    SELECT -- Constructing Audits
                        CreateRef(Model1Container.Audits, row(T2.AuditsAuditTypes_Audits_Id), [Model1.Audits]) AS AuditsAuditTypes_Audits, 
                        T2.AuditsAuditTypes_AuditTypes
                    FROM (
                        SELECT -- Constructing AuditTypes
                            T1.AuditsAuditTypes_Audits_Id, 
                            CreateRef(Model1Container.AuditTypes, row(T1.AuditsAuditTypes_AuditTypes_Id), [Model1.AuditTypes]) AS AuditsAuditTypes_AuditTypes
                        FROM (
                            SELECT 
                                T.Id AS AuditsAuditTypes_Audits_Id, 
                                T.AuditTypes_Id AS AuditsAuditTypes_AuditTypes_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.Audits AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditStatus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStatus
                    [Model1.AuditStatus](T1.AuditStatus_Id, T1.AuditStatus_Status) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditStatusAudits_Audits_Id),[Model1.Audits]),[Model1.AuditStatusAudits],AuditStatus,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditStatus_Id, 
                        T.Status AS AuditStatus_Status, 
                        True AS _from0, 
                        T.Audits_Id AS AuditStatusAudits_Audits_Id
                    FROM Model1StoreContainer.AuditStatus AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditStatusAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStatusAudits
                    [Model1.AuditStatusAudits](T3.AuditStatusAudits_AuditStatus, T3.AuditStatusAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditStatus
                        CreateRef(Model1Container.AuditStatus, row(T2.AuditStatusAudits_AuditStatus_Id), [Model1.AuditStatus]) AS AuditStatusAudits_AuditStatus, 
                        T2.AuditStatusAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditStatusAudits_AuditStatus_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditStatusAudits_Audits_Id), [Model1.Audits]) AS AuditStatusAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditStatusAudits_AuditStatus_Id, 
                                T.Audits_Id AS AuditStatusAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditStatus AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditTypes
                    [Model1.AuditTypes](T1.AuditTypes_Id, T1.AuditTypes_Type)
                FROM (
                    SELECT 
                        T.Id AS AuditTypes_Id, 
                        T.Type AS AuditTypes_Type, 
                        True AS _from0
                    FROM Model1StoreContainer.AuditTypes AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditPresentations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditPresentations
                    [Model1.AuditPresentations](T1.AuditPresentations_Id, T1.AuditPresentations_PresentationDate, T1.AuditPresentations_PresenterID, T1.AuditPresentations_Presentation) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditPresentationsAudits_Audits_Id),[Model1.Audits]),[Model1.AuditPresentationsAudits],AuditPresentations,Audits) 
                    RELATIONSHIP(CREATEREF(Model1Container.Staffs, ROW(T1.AuditPresentationsStaff_Staff_Id),[Model1.Staff]),[Model1.AuditPresentationsStaff],AuditPresentations,Staff) 
                FROM (
                    SELECT 
                        T.Id AS AuditPresentations_Id, 
                        T.PresentationDate AS AuditPresentations_PresentationDate, 
                        T.PresenterID AS AuditPresentations_PresenterID, 
                        T.Presentation AS AuditPresentations_Presentation, 
                        True AS _from0, 
                        T.Audits_Id AS AuditPresentationsAudits_Audits_Id, 
                        T.Staffs_Id AS AuditPresentationsStaff_Staff_Id
                    FROM Model1StoreContainer.AuditPresentations AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditPresentationsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditPresentationsAudits
                    [Model1.AuditPresentationsAudits](T3.AuditPresentationsAudits_AuditPresentations, T3.AuditPresentationsAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditPresentations
                        CreateRef(Model1Container.AuditPresentations, row(T2.AuditPresentationsAudits_AuditPresentations_Id), [Model1.AuditPresentations]) AS AuditPresentationsAudits_AuditPresentations, 
                        T2.AuditPresentationsAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditPresentationsAudits_AuditPresentations_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditPresentationsAudits_Audits_Id), [Model1.Audits]) AS AuditPresentationsAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditPresentationsAudits_AuditPresentations_Id, 
                                T.Audits_Id AS AuditPresentationsAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditPresentations AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditPresentationsStaff.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditPresentationsStaff
                    [Model1.AuditPresentationsStaff](T3.AuditPresentationsStaff_AuditPresentations, T3.AuditPresentationsStaff_Staff)
                FROM (
                    SELECT -- Constructing AuditPresentations
                        CreateRef(Model1Container.AuditPresentations, row(T2.AuditPresentationsStaff_AuditPresentations_Id), [Model1.AuditPresentations]) AS AuditPresentationsStaff_AuditPresentations, 
                        T2.AuditPresentationsStaff_Staff
                    FROM (
                        SELECT -- Constructing Staff
                            T1.AuditPresentationsStaff_AuditPresentations_Id, 
                            CreateRef(Model1Container.Staffs, row(T1.AuditPresentationsStaff_Staff_Id), [Model1.Staff]) AS AuditPresentationsStaff_Staff
                        FROM (
                            SELECT 
                                T.Id AS AuditPresentationsStaff_AuditPresentations_Id, 
                                T.Staffs_Id AS AuditPresentationsStaff_Staff_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditPresentations AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.Staffs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing Staffs
                    [Model1.Staff](T1.Staff_Id, T1.Staff_FIrstName, T1.Staff_LastName, T1.Staff_EMail) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.StaffAudits_Audits_Id),[Model1.Audits]),[Model1.StaffAudits],Staff,Audits) 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.StaffAudits1_Audits_Id),[Model1.Audits]),[Model1.StaffAudits1],Staff,Audits) 
                FROM (
                    SELECT 
                        T.Id AS Staff_Id, 
                        T.FIrstName AS Staff_FIrstName, 
                        T.LastName AS Staff_LastName, 
                        T.EMail AS Staff_EMail, 
                        True AS _from0, 
                        T.Author_Id AS StaffAudits_Audits_Id, 
                        T.Manager_Id AS StaffAudits1_Audits_Id
                    FROM Model1StoreContainer.Staffs AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.StaffAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing StaffAudits
                    [Model1.StaffAudits](T3.StaffAudits_Staff, T3.StaffAudits_Audits)
                FROM (
                    SELECT -- Constructing Staff
                        CreateRef(Model1Container.Staffs, row(T2.StaffAudits_Staff_Id), [Model1.Staff]) AS StaffAudits_Staff, 
                        T2.StaffAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.StaffAudits_Staff_Id, 
                            CreateRef(Model1Container.Audits, row(T1.StaffAudits_Audits_Id), [Model1.Audits]) AS StaffAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS StaffAudits_Staff_Id, 
                                T.Author_Id AS StaffAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.Staffs AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.StaffAudits1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing StaffAudits1
                    [Model1.StaffAudits1](T3.StaffAudits1_Staff, T3.StaffAudits1_Audits)
                FROM (
                    SELECT -- Constructing Staff
                        CreateRef(Model1Container.Staffs, row(T2.StaffAudits1_Staff_Id), [Model1.Staff]) AS StaffAudits1_Staff, 
                        T2.StaffAudits1_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.StaffAudits1_Staff_Id, 
                            CreateRef(Model1Container.Audits, row(T1.StaffAudits1_Audits_Id), [Model1.Audits]) AS StaffAudits1_Audits
                        FROM (
                            SELECT 
                                T.Id AS StaffAudits1_Staff_Id, 
                                T.Manager_Id AS StaffAudits1_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.Staffs AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditActionPlans.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditActionPlans
                    [Model1.AuditActionPlans](T1.AuditActionPlans_Id, T1.AuditActionPlans_ActionPlan) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditActionPlansAudits_Audits_Id),[Model1.Audits]),[Model1.AuditActionPlansAudits],AuditActionPlans,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditActionPlans_Id, 
                        T.ActionPlan AS AuditActionPlans_ActionPlan, 
                        True AS _from0, 
                        T.Audits_Id AS AuditActionPlansAudits_Audits_Id
                    FROM Model1StoreContainer.AuditActionPlans AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditActionPlansAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditActionPlansAudits
                    [Model1.AuditActionPlansAudits](T3.AuditActionPlansAudits_AuditActionPlans, T3.AuditActionPlansAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditActionPlans
                        CreateRef(Model1Container.AuditActionPlans, row(T2.AuditActionPlansAudits_AuditActionPlans_Id), [Model1.AuditActionPlans]) AS AuditActionPlansAudits_AuditActionPlans, 
                        T2.AuditActionPlansAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditActionPlansAudits_AuditActionPlans_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditActionPlansAudits_Audits_Id), [Model1.Audits]) AS AuditActionPlansAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditActionPlansAudits_AuditActionPlans_Id, 
                                T.Audits_Id AS AuditActionPlansAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditActionPlans AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditMethods.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditMethods
                    [Model1.AuditMethods](T1.AuditMethods_Id, T1.AuditMethods_Method) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditMethodsAudits_Audits_Id),[Model1.Audits]),[Model1.AuditMethodsAudits],AuditMethods,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditMethods_Id, 
                        T.Method AS AuditMethods_Method, 
                        True AS _from0, 
                        T.Audits_Id AS AuditMethodsAudits_Audits_Id
                    FROM Model1StoreContainer.AuditMethods AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditMethodsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditMethodsAudits
                    [Model1.AuditMethodsAudits](T3.AuditMethodsAudits_AuditMethods, T3.AuditMethodsAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditMethods
                        CreateRef(Model1Container.AuditMethods, row(T2.AuditMethodsAudits_AuditMethods_Id), [Model1.AuditMethods]) AS AuditMethodsAudits_AuditMethods, 
                        T2.AuditMethodsAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditMethodsAudits_AuditMethods_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditMethodsAudits_Audits_Id), [Model1.Audits]) AS AuditMethodsAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditMethodsAudits_AuditMethods_Id, 
                                T.Audits_Id AS AuditMethodsAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditMethods AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditOutcomes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditOutcomes
                    [Model1.AuditOutcomes](T1.AuditOutcomes_Id, T1.AuditOutcomes_Outcome) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditOutcomesAudits_Audits_Id),[Model1.Audits]),[Model1.AuditOutcomesAudits],AuditOutcomes,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditOutcomes_Id, 
                        T.Outcome AS AuditOutcomes_Outcome, 
                        True AS _from0, 
                        T.Audits_Id AS AuditOutcomesAudits_Audits_Id
                    FROM Model1StoreContainer.AuditOutcomes AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditOutcomesAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditOutcomesAudits
                    [Model1.AuditOutcomesAudits](T3.AuditOutcomesAudits_AuditOutcomes, T3.AuditOutcomesAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditOutcomes
                        CreateRef(Model1Container.AuditOutcomes, row(T2.AuditOutcomesAudits_AuditOutcomes_Id), [Model1.AuditOutcomes]) AS AuditOutcomesAudits_AuditOutcomes, 
                        T2.AuditOutcomesAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditOutcomesAudits_AuditOutcomes_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditOutcomesAudits_Audits_Id), [Model1.Audits]) AS AuditOutcomesAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditOutcomesAudits_AuditOutcomes_Id, 
                                T.Audits_Id AS AuditOutcomesAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditOutcomes AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditFrequencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditFrequencies
                    [Model1.AuditFrequencies](T1.AuditFrequencies_Id, T1.AuditFrequencies_Frequency)
                FROM (
                    SELECT 
                        T.Id AS AuditFrequencies_Id, 
                        T.Frequency AS AuditFrequencies_Frequency, 
                        True AS _from0
                    FROM Model1StoreContainer.AuditFrequencies AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditStandards.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStandards
                    [Model1.AuditStandards](T1.AuditStandards_Id) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditStandardsAudits_Audits_Id),[Model1.Audits]),[Model1.AuditStandardsAudits],AuditStandards,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditStandards_Id, 
                        True AS _from0, 
                        T.Audits_Id AS AuditStandardsAudits_Audits_Id
                    FROM Model1StoreContainer.AuditStandards AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditStandardsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditStandardsAudits
                    [Model1.AuditStandardsAudits](T3.AuditStandardsAudits_AuditStandards, T3.AuditStandardsAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditStandards
                        CreateRef(Model1Container.AuditStandards, row(T2.AuditStandardsAudits_AuditStandards_Id), [Model1.AuditStandards]) AS AuditStandardsAudits_AuditStandards, 
                        T2.AuditStandardsAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditStandardsAudits_AuditStandards_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditStandardsAudits_Audits_Id), [Model1.Audits]) AS AuditStandardsAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditStandardsAudits_AuditStandards_Id, 
                                T.Audits_Id AS AuditStandardsAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditStandards AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.IRMERAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing IRMERAudits
                    [Model1.IRMERAudits](T1.IRMERAudits_Id, T1.IRMERAudits_Code, T1.IRMERAudits_Name, T1.IRMERAudits_Desscription, T1.IRMERAudits_FrequencyID, T1.IRMERAudits_SOPID) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.AuditFrequencies, ROW(T1.IRMERAuditsAuditFrequencies_AuditFrequencies_Id),[Model1.AuditFrequencies]),[Model1.IRMERAuditsAuditFrequencies],IRMERAudits,AuditFrequencies) 
                FROM (
                    SELECT 
                        T.Id AS IRMERAudits_Id, 
                        T.Code AS IRMERAudits_Code, 
                        T.Name AS IRMERAudits_Name, 
                        T.Desscription AS IRMERAudits_Desscription, 
                        T.FrequencyID AS IRMERAudits_FrequencyID, 
                        T.SOPID AS IRMERAudits_SOPID, 
                        True AS _from0, 
                        T.AuditFrequencies_Id AS IRMERAuditsAuditFrequencies_AuditFrequencies_Id
                    FROM Model1StoreContainer.IRMERAudits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.IRMERAuditsAuditFrequencies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing IRMERAuditsAuditFrequencies
                    [Model1.IRMERAuditsAuditFrequencies](T3.IRMERAuditsAuditFrequencies_IRMERAudits, T3.IRMERAuditsAuditFrequencies_AuditFrequencies)
                FROM (
                    SELECT -- Constructing IRMERAudits
                        CreateRef(Model1Container.IRMERAudits, row(T2.IRMERAuditsAuditFrequencies_IRMERAudits_Id), [Model1.IRMERAudits]) AS IRMERAuditsAuditFrequencies_IRMERAudits, 
                        T2.IRMERAuditsAuditFrequencies_AuditFrequencies
                    FROM (
                        SELECT -- Constructing AuditFrequencies
                            T1.IRMERAuditsAuditFrequencies_IRMERAudits_Id, 
                            CreateRef(Model1Container.AuditFrequencies, row(T1.IRMERAuditsAuditFrequencies_AuditFrequencies_Id), [Model1.AuditFrequencies]) AS IRMERAuditsAuditFrequencies_AuditFrequencies
                        FROM (
                            SELECT 
                                T.Id AS IRMERAuditsAuditFrequencies_IRMERAudits_Id, 
                                T.AuditFrequencies_Id AS IRMERAuditsAuditFrequencies_AuditFrequencies_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.IRMERAudits AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.RegularAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing RegularAudits
                    [Model1.RegularAudits](T1.RegularAudits_Id, T1.RegularAudits_CreationDate, T1.RegularAudits_Name, T1.RegularAudits_Description)
                FROM (
                    SELECT 
                        T.Id AS RegularAudits_Id, 
                        T.CreationDate AS RegularAudits_CreationDate, 
                        T.Name AS RegularAudits_Name, 
                        T.Description AS RegularAudits_Description, 
                        True AS _from0
                    FROM Model1StoreContainer.RegularAudits AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditSOPs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditSOPs
                    [Model1.AuditSOPs](T1.AuditSOPs_Id, T1.AuditSOPs_SOP) WITH 
                    RELATIONSHIP(CREATEREF(Model1Container.Audits, ROW(T1.AuditSOPsAudits_Audits_Id),[Model1.Audits]),[Model1.AuditSOPsAudits],AuditSOPs,Audits) 
                FROM (
                    SELECT 
                        T.Id AS AuditSOPs_Id, 
                        T.SOP AS AuditSOPs_SOP, 
                        True AS _from0, 
                        T.Audits_Id AS AuditSOPsAudits_Audits_Id
                    FROM Model1StoreContainer.AuditSOPs AS T
                ) AS T1");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.AuditSOPsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing AuditSOPsAudits
                    [Model1.AuditSOPsAudits](T3.AuditSOPsAudits_AuditSOPs, T3.AuditSOPsAudits_Audits)
                FROM (
                    SELECT -- Constructing AuditSOPs
                        CreateRef(Model1Container.AuditSOPs, row(T2.AuditSOPsAudits_AuditSOPs_Id), [Model1.AuditSOPs]) AS AuditSOPsAudits_AuditSOPs, 
                        T2.AuditSOPsAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.AuditSOPsAudits_AuditSOPs_Id, 
                            CreateRef(Model1Container.Audits, row(T1.AuditSOPsAudits_Audits_Id), [Model1.Audits]) AS AuditSOPsAudits_Audits
                        FROM (
                            SELECT 
                                T.Id AS AuditSOPsAudits_AuditSOPs_Id, 
                                T.Audits_Id AS AuditSOPsAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.AuditSOPs AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.RegularAuditsAudits.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing RegularAuditsAudits
                    [Model1.RegularAuditsAudits](T3.RegularAuditsAudits_RegularAudits, T3.RegularAuditsAudits_Audits)
                FROM (
                    SELECT -- Constructing RegularAudits
                        CreateRef(Model1Container.RegularAudits, row(T2.RegularAuditsAudits_RegularAudits_Id), [Model1.RegularAudits]) AS RegularAuditsAudits_RegularAudits, 
                        T2.RegularAuditsAudits_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.RegularAuditsAudits_RegularAudits_Id, 
                            CreateRef(Model1Container.Audits, row(T1.RegularAuditsAudits_Audits_Id), [Model1.Audits]) AS RegularAuditsAudits_Audits
                        FROM (
                            SELECT 
                                T.RegularAudit_Id AS RegularAuditsAudits_RegularAudits_Id, 
                                T.Audits_Id AS RegularAuditsAudits_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.RegularAuditsAudits AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }

        /// //**********************************************************************************************************************************************************************
        /// <summary>
        /// Gets the view for Model1Container.IRMERAuditsAudits1.
        /// </summary>
        /// <returns>The mapping view.</returns>
        /// //**********************************************************************************************************************************************************************
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
                SELECT VALUE -- Constructing IRMERAuditsAudits1
                    [Model1.IRMERAuditsAudits1](T3.IRMERAuditsAudits1_IRMERAudits, T3.IRMERAuditsAudits1_Audits)
                FROM (
                    SELECT -- Constructing IRMERAudits
                        CreateRef(Model1Container.IRMERAudits, row(T2.IRMERAuditsAudits1_IRMERAudits_Id), [Model1.IRMERAudits]) AS IRMERAuditsAudits1_IRMERAudits, 
                        T2.IRMERAuditsAudits1_Audits
                    FROM (
                        SELECT -- Constructing Audits
                            T1.IRMERAuditsAudits1_IRMERAudits_Id, 
                            CreateRef(Model1Container.Audits, row(T1.IRMERAuditsAudits1_Audits_Id), [Model1.Audits]) AS IRMERAuditsAudits1_Audits
                        FROM (
                            SELECT 
                                T.IRMERAudit1_Id AS IRMERAuditsAudits1_IRMERAudits_Id, 
                                T.AuditEvents_Id AS IRMERAuditsAudits1_Audits_Id, 
                                True AS _from0
                            FROM Model1StoreContainer.IRMERAuditsAudits1 AS T
                        ) AS T1
                    ) AS T2
                ) AS T3");
        }
    }
}
